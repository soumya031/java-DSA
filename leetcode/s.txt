Minimum Recolors to Get K Consecutive Black Blocks
Easy
Topics
Companies
Hint
You are given a 0-indexed string blocks of length n, where blocks[i] is either 'W' or 'B', representing the color of the ith block. The characters 'W' and 'B' denote the colors white and black, respectively.

You are also given an integer k, which is the desired number of consecutive black blocks.

In one operation, you can recolor a white block such that it becomes a black block.

Return the minimum number of operations needed such that there is at least one occurrence of k consecutive black blocks.

 

Example 1:

Input: blocks = "WBBWWBBWBW", k = 7
Output: 3
Explanation:
One way to achieve 7 consecutive black blocks is to recolor the 0th, 3rd, and 4th blocks
so that blocks = "BBBBBBBWBW". 
It can be shown that there is no way to achieve 7 consecutive black blocks in less than 3 operations.
Therefore, we return 3.


Approach 2: Sliding Window
Intuition
In the previous approach, we used a queue to manage the elements in the blocks array, but this came at the cost of additional space allocation. For each segment of k blocks, we had to store up to k characters in the queue, resulting in linear space complexity relative to k. To avoid this overhead, we need a solution that doesn't require extra space for storing the segments.

We can achieve this by adopting a Fixed Sliding Window Approach. The idea here is to slide a window of size k across the array while maintaining two pointers, left and right, that represent the start and end of the window. By incrementing both pointers together, we can efficiently track and check each segment of size k without needing extra space.

To implement this approach, we start by initializing both left and right pointers at the beginning of the array. Then, we move the right pointer until we have exactly k elements in the window, which is the range we’re interested in. Once we’ve captured a window of size k, we check how many white blocks are in this segment.

After that, we increment both left and right by one position at each step. This moves the window to the next segment, and we again check how many white blocks are present. We repeat this process until the window has slid across the entire array.

By the end, we will have checked every possible segment of k consecutive blocks. At each step, we can track and update the minimum number of recolors needed. The beauty of this approach is that it allows us to explore all potential segments without the need for any extra space, other than a few variables to track the window and the number of recolors.

Algorithm
Initialize left to 0 to act as the left pointer for the sliding window.
Initialize numWhites to 0 to track the number of white blocks in the current iteration.
Initialize numRecolors to the maximum integer value to represent the minimum number of recolors needed to have k consecutive black blocks.
Iterate through the first k elements of blocks. For each element at index right:
If blocks[right] is white, increase numWhites by 1
If the current window is of size k, meaning right - left + 1 is equal to k:
Update numRecolors to the minimum of numRecolors and numWhites.
If blocks[left] is white, decrease numWhites by 1.
Increase left by 1.
Return numRecolors.

